<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome to Xiao Liu&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-08T14:29:07.550Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>系统调用</title>
    <link href="http://example.com/uncategorized/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    <id>http://example.com/uncategorized/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</id>
    <published>2021-12-08T10:57:53.000Z</published>
    <updated>2021-12-08T14:29:07.550Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="系统调用"   >          <a href="#系统调用" class="heading-link"><i class="fas fa-link"></i></a><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h1>              <h2 id="系统调用-1"   >          <a href="#系统调用-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#系统调用-1" class="headerlink" title="系统调用"></a>系统调用</h2>      <p>计算机系统的各种硬件资源都是有限的，在现代多任务操作系统上同时运行的多个进程都需要访问这些资源，为了更好的管理这些资源进程是不需要直接操作的，所有对这些资源的访问都必须由操作系统控制，也就是说操作系统是使用这些资源的唯一入口，而这个入口就是操作系统提供的额系统调用（System Call）。在Linux中系统的调用时用户空间访问内核的唯一手段，除了异常和陷入外，它是内核唯一的合法入口。</p><p>这些系统效用按照功能大致可分为如下几类：</p><ul><li>设备管理：完成设备的请i去或释放，以及设备启动等功能。</li><li>文件管理：完成文件的读、写、创建及删除等功能。</li><li>进程指控：完成进程的创建、撤销、阻塞及唤醒等功能。</li><li>进程控制：完成进程之间的消息传递或信号传递等功能。</li><li>内存管理：完成内核的分配、回收以及获取作业占用内存大小及始址。</li></ul><p>系统调用说的也是操作系统提供给用户程序调用的一组“特殊”接口，用户程序可以通过这组“特殊”接口来获得操作系统内核提供的服务，比如用户可以通过文件系统相关的系统调用请求系统打开文件、关闭文件或读写文件，可以通过时钟相关的系统调用获得系统时间或设置定时器等。</p><p>从逻辑上来说，系统调用可被看成是一个内核与用户空间程序交互的接口——好比是一个中间人，把用户进程的请求传达给内核，待内核把请求处理完毕后再将处理结果送回用户空间。</p><p>这里我们举个例子：如果你是一个闷骚且害羞的程序员，那shell就像媒婆，操作系统内核就是你们村头漂亮且让你心动的妹妹小莲。你看上了小莲，但是又不好意思直接表白，那你就找到了媒婆帮你提亲，所有的事情都是由你跟媒婆直接沟通，由媒婆传达给小莲，而我们找到的媒婆姓王，所以我们叫他王婆，她就是我们常使用的bash。</p><p><img src="assets/image-20211208205407351.png" alt="image-20211208205407351"></p><p>系统服务之所以需要通过系统调用来提供用户空间的根本原因是为了对系统进行“保护”，因为我们知道Linux的运行空间分为内核空间与用户空间，他们各自运行在不同的级别中，逻辑上相互隔离。所以用户进程在通常情况下不允许访问内核数据，也无法使用内核函数，他们只能在用户空间操作用户数据，调用用户空间函数。比如我们熟悉的“hello world”程序（执行时）就是标准的用户空间进程，它使用的打印函数printf就属于用户空间函数，打印的字符“hello world”字符串也属于用户空间数据。</p><p>但是很多情况下，用户进程需要获得系统服务（调用系统程序），这时就必须利用系统提供给用户的“特殊接口”——系统调用，它的特殊性主要在于规定了进入内核的具有位置；换句话说，用户访问内核的路径是事先规定好的，只能从规定位置进入内核，而不准肆意跳入内核。有了这样的陷入内核的统一访问路径才能限制内核安全无误。我们可以形象地描述这种机制：作为一个游客，你可以买票要求进入野生动物园，但它必须老老实实的坐观光车上，按照规定的路线观光游览。当然，不准下车，因为那样太危险，不是让你丢掉小命，就是让你吓坏了动物。</p>        <h2 id="系统调用的实现"   >          <a href="#系统调用的实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#系统调用的实现" class="headerlink" title="系统调用的实现"></a>系统调用的实现</h2>      <p>系统调用是属于操作系统内核的一部分，必须以某种方式提供给进程让他们去调用。CPU可以在不同的特权级级别下运行，而相应的操作系统也有不同的运行级别，用户态和内核态。运行在内核态的进程可以毫无限制的访问各种资源，而在用户态下的用户进程的各种操作都有着限制，比如不能随意的访问内存、不能开闭中断以及切换运行的特权级别。显然，属于内核的系统调用一定是运行在内核态下。</p><p>系统调用的具体实现在下篇介绍：<a href="#">系统调用的实现</a></p>        <h2 id="系统调用和库函数的区别"   >          <a href="#系统调用和库函数的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#系统调用和库函数的区别" class="headerlink" title="系统调用和库函数的区别"></a>系统调用和库函数的区别</h2>      <p>Linux下对文件操作有两种方式：系统调用（system call）和库函数调用（library functions）</p><p>库函数由两类函数组成：</p><p>1、不需要调用系统调用</p><p>不需要切换到内核空间即可完成函数全部功能，并且将结果反馈给应用程序，如strpy、bzero等字符串操作函数。</p><p>2、需要调用系统调用</p><p>需要切换到内核空间，该类函数通过封装系统调用去实现相应的功能，如printf、fread等。</p><p><img src="assets/image-20211208221812969.png" alt="image-20211208221812969"></p>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h1 id=&quot;系统调用&quot;   &gt;
          &lt;a href=&quot;#系统调用&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#系统调用&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>second</title>
    <link href="http://example.com/uncategorized/second/"/>
    <id>http://example.com/uncategorized/second/</id>
    <published>2021-12-07T06:24:43.000Z</published>
    <updated>2021-12-07T06:26:50.742Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="第二篇文章"   >          <a href="#第二篇文章" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二篇文章" class="headerlink" title="第二篇文章"></a>第二篇文章</h1>      ]]></content>
    
    
      
      
    <summary type="html">
        &lt;h1 id=&quot;第二篇文章&quot;   &gt;
          &lt;a href=&quot;#第二篇文章&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;#第二篇文章&quot; class=&quot;headerlin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>first</title>
    <link href="http://example.com/uncategorized/first/"/>
    <id>http://example.com/uncategorized/first/</id>
    <published>2021-12-07T06:15:53.000Z</published>
    <updated>2021-12-07T06:15:53.925Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
